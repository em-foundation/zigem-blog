{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":""},{"location":"post-001/","title":"The EM language is dead, long live EM !!!","text":"<p>For the past fifteen years, the focus of the EM Programming Language has remained constant \u2013 producing \"tiny code for tiny chips\" where every byte of memory and \u03bcJoule of energy matters.\u2009  But now, I may have unwittingly come upon a better means\u2009 towards this end.</p> <p></p>"},{"location":"post-001/#if-you-cant-beat-emzigem","title":"If you can't beat 'em,\u2002Zig\u2022EM","text":"<p>My zeal to promote EM earlier this year blinded me to the challenges of sustaining a novel programming language for resource-constrained embedded systems.\u2009  Supporting just a handful of developers over the past decade pales in comparison with the effort demanded to render EM openly and freely available to the broader embedded community.</p> <p>My (rhetorical) question to the community about the need to move beyond C (towards EM, of course\u2009!!\u2009) elicited a mixed bag of reactions \u2013 from \"cool, good luck\" \u2009to \"sorry, try again\"\u2009.\u2009 But then, I received this most consequential of comments which turned on the lights for me:\u00a0</p> <p>\"With a language like Zig I don't think there's need for EM\"</p> <p>FULL DISCLOSURE \u2013 You don't know what you don't know</p> <p>I pride myself on staying informed about the latest directions in programming language design and imple\u00admentation.\u2009  For me, programming languages lie at the heart of Computer Science; and for me, conceiving and evolving the EM language provided a personal path to the discipline's core.</p> <p>Honestly, I'd never even heard\u2009 of Zig when first receiving this comment several months ago.  While attending the Embedded World Conference in N\u00fcrnberg shortly thereafter, I informally polled dozens of attendees; and with the exception of my esteemed colleague Jeremy Bennett, no one had heard of the Zig programming language either.\u2009  Several folks did, however, know about zigbee\u00ae \u2013 which you'd expect from this crowd. </p> <p>Like EM, Zig offers higher-level programming with higher-levels of performance when compared with C; and Zig regularly earns high-marks when held up against other modern systems programming languages like Go and Rust \u2013 both already targeting embedded MCUs.</p> <p>But unlike the competition, Zig offers an inherent simplicity and transparency reminiscent of C \u2013 the incumbant systems programming language which some believe Zig could supplant.</p> <p>First released in early 2016, the Zig community supporting and sustaining this novel language continues to cast its net further and wider.\u2009 Compared with Go and Rust, however, Zig very much remains a work in progress \u2013 while capturing new followers (like me) on a daily basis.</p> <p>If you haven't already googled \"Zig programming language\", visit ziglang.org as a starting point.</p> <p>Suffice it say, far more folks have already lined up behind Zig than would ever even hear of the EM programming language.  To that end, I've decided to \"downgrade\" EM to a programming framework leveraging Zig as its host language \u2013 which finally leads us to Zig\u2022EM.</p> <p>It's Zig all the way down...</p> <p>As described here, the current rendition of EM \u2013 a transpiler written in TypeScript \u2013 generates a meta-program (implemented in NodeJS) whose hosted execution shapes a downstream run-time program (implemented in C/C++); the latter then compiles into firmware targeting some resource-constrained MCU platform.</p> <p>In the case of Zig\u2022EM, it will use just one language throughout its implementation \u2013 resulting in a 10\u2715 reduction in the amount of code I'll need to maintain; I can also leverage ZLS, an implementation of Microsoft's Language Server Protocol which enables Zig integration with VSCode and other popular IDEs.</p> <p>And above all, you can direct all questions\u2009/\u2009comments about the Zig language to the Zig community \u2013 as will I.</p> <p>As its overarching goal, the Zig\u2022EM framework strives to reconstitute the novel concepts and constructs first introduced within EM by using design-time patterns, build-time tooling, and run-time services \u2013 all leveraging the latest stable release of the Zig programming language.</p>"},{"location":"post-001/#plans-are-worthless","title":"Plans are worthless\u2009...","text":"<p>... but planning is everything\u2009.(1)\u00a0  Given our unanticipated change of course, let's set some new objectives for evolving the Zig\u2022EM framework through the remainder of this year:</p> <ol> <li>General Dwight D. Eisenhower,34th President of the United States</li> </ol> <p>focus exclusively on supporting the TI CC2340R5, which served as the initial hardware platform when EM debuted late last year; my enthusiasm for this wireless MCU hasn't waned in the interim\u2009!!</p> <p>create a suite of basic Zig\u2022EM examples \u2013 mimicking the dozen EM programs originally described here\u2009 \u2013 which would then illustrate how the framework maps EM constructs onto the Zig language</p> <p>benchmark the runtime performance of Zig\u2022EM in terms of program size, execution time, and power consumption \u2013 using our suite of basic examples along with a Zig-based re-work of EM\u2022Mark</p> <p>push forward with Zig\u2022EM support for the CC2340R5's 2.4\u2009GHz radio \u2013 eventually re-creating the minimalist BLE stack described here and measuring its performance against TI's legacy C code</p> <p>maintain a public Git repository containing the Zig\u2022EM framework source code \u2013 written entirely in Zig from the ground-up, and made openly available under an unconstrained MIT license</p> <p>I'll try to post regular updates on progress towards these objectives, along with some high-level tours as Zig\u2022EM takes shape.\u2009  Let's see what happens, as we do live in interesting times\u2009!!</p>"},{"location":"post-001/#how-you-can-get-involved","title":"How you can get involved","text":"<p>explore the Zig language \u2013 I highly recommend Karl Sequin's Learning Zig as a starting-point</p> <p>experience the \"Zen of Zig\" at the Ziggit forum \u2013 a refreshing respite from the rants at Reddit</p> <p>read my first post about Zig\u2022EM to the Zig dev community  \u2013 then sign-up and send me some </p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"archive/2024/","title":"2024","text":""}]}